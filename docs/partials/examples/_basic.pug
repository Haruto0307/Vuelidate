h2.typo__h2#tagging Basic usage
p.typo__p
  | For each value you want to validate, you have to create a key inside <kbd>validations</kbd> options.
  | You can specify when input becomes dirty by using appropriate event on your input box.
.grid__row
  .grid__column.grid__unit--md-5
    .form-group(v-bind:class="{ 'form-group--error': $v.name.$error }")
      label.form__label Name
      input.form__input(v-model="name" @input="$v.name.$touch()")
    span.form-group__message(v-if="!$v.name.required") Field is required
    span.form-group__message(v-if="!$v.name.minLength") Name must be longer than 6 letters.
    pre
      | name: {{ $v.name }}

    .form-group(v-bind:class="{ 'form-group--error': $v.age.$error }")
      label.form__label Age
      input.form__input(v-model="age" @blur="$v.age.$touch()")
    span.form-group__message(v-if="!$v.age.between") Must be between 20 and 30
    pre
      | age: {{ $v.age }}

  .grid__column.grid__unit--md-7
    label.typo__label Code sample
    pre.language-jade
      code.
        .form-group(v-bind:class="{ 'form-group--error': $v.name.$error }")
          label.form__label Name
          input.form__input(v-model="name" @input="$v.name.$touch()")
        span.form-group__message(v-if="!$v.name.required") Field is required
        span.form-group__message(v-if="!$v.name.minLength") Name must be longer than 6 letters.

        .form-group(v-bind:class="{ 'form-group--error': $v.age.$error }")
          label.form__label Age
          input.form__input(v-model="age" @blur="$v.age.$touch()")
        span.form-group__message(v-if="!$v.age.between") Must be between 20 and 30


    pre.language-javascript
      code.
        data () {
          return {
            name: '',
            age: null
          }
        },
        validations: {
          name: {
            required,
            minLength: minLength(4)
          },
          age: {
            between: between(20, 30)
          }
        }

p.typo__p
  | You can link related fields by contextified validators. An example of this being `sameAs` builtin validator.
.grid__row
  .grid__column.grid__unit--md-5
    .form-group(v-bind:class="{ 'form-group--error': $v.password.$error }")
      label.form__label Password
      input.form__input(v-model="password" @input="$v.password.$touch()")
    span.form-group__message(v-if="!$v.password.required") Password is required.
    span.form-group__message(v-if="!$v.password.minLength") Password must be longer than 6 letters.

    .form-group(v-bind:class="{ 'form-group--error': $v.repeatPassword.$error }")
      label.form__label Repeat password
      input.form__input(v-model="repeatPassword" @input="$v.repeatPassword.$touch()")
    span.form-group__message(v-if="!$v.repeatPassword.sameAsPassword") Passwords must be identical.
    pre
      | password: {{ $v.password }}
      | repeatPassword: {{ $v.repeatPassword }}

  .grid__column.grid__unit--md-7
    label.typo__label Code sample
    pre.language-jade
      code.
        .form-group(v-bind:class="{ 'form-group--error': $v.password.$error }")
          label.form__label Password
          input.form__input(v-model="password" @input="$v.password.$touch()")
        span.form-group__message(v-if="!$v.password.required") Password is required.
        span.form-group__message(v-if="!$v.password.minLength") Password must be longer than 6 letters.

        .form-group(v-bind:class="{ 'form-group--error': $v.repeatPassword.$error }")
          label.form__label Repeat password
          input.form__input(v-model="repeatPassword" @input="$v.repeatPassword.$touch()")
        span.form-group__message(v-if="!$v.repeatPassword.sameAsPassword") Passwords must be identical.

    pre.language-javascript
      code.
        data () {
          return {
            password: '',
            repeatPassword: ''
          }
        },
        validations: {
          password: {
            required,
            minLength: minLength(6)
          },
          repeatPassword: {
            sameAsPassword: sameAs('password')
          }
        }

p.typo__p
  | You can nest validators to match your data as deep as you want.
  | Parent validator errors out when any of its children reports an error.
  | This might be very useful for overall form validation.
.grid__row
  .grid__column.grid__unit--md-5
    .form-group(v-bind:class="{ 'form-group--error': $v.form.nestedA.$error }")
      label.form__label Nested A
      input.form__input(v-model="form.nestedA" @input="$v.form.nestedA.$touch()")
    span.form-group__message(v-if="!$v.form.nestedA.required") Field is required.
    .form-group(v-bind:class="{ 'form-group--error': $v.form.nestedB.$error }")
      label.form__label Nested B
      input.form__input(v-model="form.nestedB" @input="$v.form.nestedB.$touch()")
    span.form-group__message(v-if="!$v.form.nestedB.required") Field is required.

    .form-group(v-bind:class="{ 'form-group--error': $v.form.$error }")
    span.form-group__message(v-if="$v.form.$error") Form is invalid.

    pre
      | form: {{ $v.form }}

    button(@click="$v.form.$touch()") touch

  .grid__column.grid__unit--md-7
    label.typo__label Code sample
    pre.language-jade
      code.
        .form-group(v-bind:class="{ 'form-group--error': $v.form.nestedA.$error }")
          label.form__label Nested A
          input.form__input(v-model="form.nestedA" @input="$v.form.nestedA.$touch()")
        span.form-group__message(v-if="!$v.form.nestedA.required") Field is required.

        .form-group(v-bind:class="{ 'form-group--error': $v.form.nestedB.$error }")
          label.form__label Nested B
          input.form__input(v-model="form.nestedB" @input="$v.form.nestedB.$touch()")
        span.form-group__message(v-if="!$v.form.nestedB.required") Field is required.

        .form-group(v-bind:class="{ 'form-group--error': $v.form.$error }")
        span.form-group__message(v-if="$v.form.$error") Form is invalid.

    pre.language-javascript
      code.
        data () {
          return {
            form: {
              nestedA: '',
              nestedB: ''
            }
          }
        },
        validations: {
          form: {
            nestedA: {
              required
            },
            nestedB: {
              required
            }
          }
        }

p.typo__p
  | If you don't want to create a validator that groups many otherise unrelated
  | fields together, you can create a validationGroup.
.grid__column.grid__unit--md-5
  .form-group(v-bind:class="{ 'form-group--error': $v.flatA.$error }")
    label.form__label Flat A
    input.form__input(v-model="flatA" @input="$v.flatA.$touch()")
  span.form-group__message(v-if="!$v.flatA.required") Field is required.
  .form-group(v-bind:class="{ 'form-group--error': $v.flatB.$error }")
    label.form__label Flat B
    input.form__input(v-model="flatB" @input="$v.flatB.$touch()")
  span.form-group__message(v-if="!$v.flatB.required") Field is required.
  .form-group(v-bind:class="{ 'form-group--error': $v.forGroup.nested.$error }")
    label.form__label Nested field
    input.form__input(v-model="forGroup.nested" @input="$v.forGroup.nested.$touch()")
  span.form-group__message(v-if="!$v.forGroup.nested.required") Field is required.

  .form-group(v-bind:class="{ 'form-group--error': $v.validationGroup.$error }")
  span.form-group__message(v-if="$v.validationGroup.$error") Group is invalid.

  pre
    | validationGroup: {{ $v.validationGroup }}

.grid__column.grid__unit--md-7
  label.typo__label Code sample
  pre.language-jade
    code.
      .form-group(v-bind:class="{ 'form-group--error': $v.flatA.$error }")
        label.form__label Flat A
        input.form__input(v-model="flatA" @input="$v.flatA.$touch()")
      span.form-group__message(v-if="!$v.flatA.required") Field is required.
      .form-group(v-bind:class="{ 'form-group--error': $v.flatB.$error }")
        label.form__label Flat B
        input.form__input(v-model="flatB" @input="$v.flatB.$touch()")
      span.form-group__message(v-if="!$v.flatB.required") Field is required.
      .form-group(v-bind:class="{ 'form-group--error': $v.forGroup.nested.$error }")
        label.form__label Nested field
        input.form__input(v-model="forGroup.nested" @input="$v.forGroup.nested.$touch()")
      span.form-group__message(v-if="!$v.forGroup.nested.required") Field is required.

      .form-group(v-bind:class="{ 'form-group--error': $v.validationGroup.$error }")
      span.form-group__message(v-if="$v.validationGroup.$error") Group is invalid.


  pre.language-javascript
    code.
      data () {
        return {
          flatA: '',
          flatB: '',
          forGroup: {
            nested: ''
          }
        }
      },
      validations: {
        flatA: { required },
        flatB: { required },
        forGroup: {
          nested: { required }
        },
        validationGroup: ['flatA', 'flatB', 'forGroup.nested']
      }


p.typo__p
  | Array support with $each keyword
.grid__column.grid__unit--md-5
  div(v-for="(person, index) in people")
    .form-group(v-bind:class="{ 'form-group--error': $v.people.$each[index].$error }")
      label.form__label Name for {{ index }}
      input.form__input(v-model="person.name" @input="$v.people.$each[index].name.$touch()")
    span.form-group__message(v-if="!$v.people.$each[index].name.required") Name is required.

  div
    button(@click="people.push({name: ''})") Add
    button(@click="people.pop()") Remove
  .form-group(v-bind:class="{ 'form-group--error': $v.people.$error }")
  span.form-group__message(v-if="$v.people.$error") List is invalid.

  pre
    | people: {{ $v.people }}

.grid__column.grid__unit--md-7
  label.typo__label Code sample
  pre.language-jade
    code.
      TODO

  pre.language-javascript
    code.
      TODO
